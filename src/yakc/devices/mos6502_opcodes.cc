// #version:2#
// machine generated, do not edit!
#include "mos6502.h"
namespace YAKC {
uint32_t mos6502::do_op(system_bus* bus) {
  cycles=1;
  switch(fetch_op()) {
    case 0x0: brk(); break;
    case 0x1: ora(addr_ix()); break;
    case 0x5: ora(addr_z()); break;
    case 0x6: asl(addr_z()); break;
    case 0x8: php(); break;
    case 0x9: ora(addr_imm()); break;
    case 0xa: asla(); break;
    case 0xd: ora(addr_a()); break;
    case 0xe: asl(addr_a()); break;
    case 0x10: br(NF,0); break;
    case 0x11: ora(addr_iy()); break;
    case 0x15: ora(addr_zi(X)); break;
    case 0x16: asl(addr_zi(X)); break;
    case 0x19: ora(addr_ai(Y)); break;
    case 0x1d: ora(addr_ai(X)); break;
    case 0x1e: asl(addr_ai(X)); break;
    case 0x20: jsr(); break;
    case 0x21: anda(addr_ix()); break;
    case 0x24: bit(addr_z()); break;
    case 0x25: anda(addr_z()); break;
    case 0x26: rol(addr_z()); break;
    case 0x28: plp(); break;
    case 0x29: anda(addr_imm()); break;
    case 0x2a: rola(); break;
    case 0x2c: bit(addr_a()); break;
    case 0x2d: anda(addr_a()); break;
    case 0x2e: rol(addr_a()); break;
    case 0x30: br(NF,NF); break;
    case 0x31: anda(addr_iy()); break;
    case 0x35: anda(addr_zi(X)); break;
    case 0x36: rol(addr_zi(X)); break;
    case 0x39: anda(addr_ai(Y)); break;
    case 0x3d: anda(addr_ai(X)); break;
    case 0x3e: rol(addr_ai(X)); break;
    case 0x40: rti(); break;
    case 0x41: eor(addr_ix()); break;
    case 0x45: eor(addr_z()); break;
    case 0x46: lsr(addr_z()); break;
    case 0x48: pha(); break;
    case 0x49: eor(addr_imm()); break;
    case 0x4a: lsra(); break;
    case 0x4c: jmp(addr_a()); break;
    case 0x4d: eor(addr_a()); break;
    case 0x4e: lsr(addr_a()); break;
    case 0x50: br(VF,0); break;
    case 0x51: eor(addr_iy()); break;
    case 0x55: eor(addr_zi(X)); break;
    case 0x56: lsr(addr_zi(X)); break;
    case 0x59: eor(addr_ai(Y)); break;
    case 0x5d: eor(addr_ai(X)); break;
    case 0x5e: lsr(addr_ai(X)); break;
    case 0x60: rts(); break;
    case 0x61: adc(addr_ix()); break;
    case 0x65: adc(addr_z()); break;
    case 0x66: ror(addr_z()); break;
    case 0x68: pla(); break;
    case 0x69: adc(addr_imm()); break;
    case 0x6a: rora(); break;
    case 0x6c: jmpi(addr_a()); break;
    case 0x6d: adc(addr_a()); break;
    case 0x6e: ror(addr_a()); break;
    case 0x70: br(VF,VF); break;
    case 0x71: adc(addr_iy()); break;
    case 0x75: adc(addr_zi(X)); break;
    case 0x76: ror(addr_zi(X)); break;
    case 0x79: adc(addr_ai(Y)); break;
    case 0x7d: adc(addr_ai(X)); break;
    case 0x7e: ror(addr_ai(X)); break;
    case 0x81: sta(addr_ix()); break;
    case 0x84: sty(addr_z()); break;
    case 0x85: sta(addr_z()); break;
    case 0x86: stx(addr_z()); break;
    case 0x88: dey(); break;
    case 0x8a: txa(); break;
    case 0x8c: sty(addr_a()); break;
    case 0x8d: sta(addr_a()); break;
    case 0x8e: stx(addr_a()); break;
    case 0x90: br(CF,0); break;
    case 0x91: sta(addr_iy()); break;
    case 0x94: sty(addr_zi(X)); break;
    case 0x95: sta(addr_zi(X)); break;
    case 0x96: stx(addr_zi(Y)); break;
    case 0x99: sta(addr_ai(Y)); break;
    case 0x9a: txs(); break;
    case 0x9d: sta(addr_ai(X)); break;
    case 0x9e: stx(addr_ai(Y)); break;
    case 0xa0: ldy(addr_imm()); break;
    case 0xa1: lda(addr_ix()); break;
    case 0xa2: ldx(addr_imm()); break;
    case 0xa4: ldy(addr_z()); break;
    case 0xa5: lda(addr_z()); break;
    case 0xa6: ldx(addr_z()); break;
    case 0xa8: tay(); break;
    case 0xa9: lda(addr_imm()); break;
    case 0xaa: tax(); break;
    case 0xac: ldy(addr_a()); break;
    case 0xad: lda(addr_a()); break;
    case 0xae: ldx(addr_a()); break;
    case 0xb0: br(CF,CF); break;
    case 0xb1: lda(addr_iy()); break;
    case 0xb4: ldy(addr_zi(X)); break;
    case 0xb5: lda(addr_zi(X)); break;
    case 0xb6: ldx(addr_zi(Y)); break;
    case 0xb9: lda(addr_ai(Y)); break;
    case 0xba: tsx(); break;
    case 0xbc: ldy(addr_ai(X)); break;
    case 0xbd: lda(addr_ai(X)); break;
    case 0xbe: ldx(addr_ai(Y)); break;
    case 0xc0: cpy(addr_imm()); break;
    case 0xc1: cmp(addr_ix()); break;
    case 0xc4: cpy(addr_z()); break;
    case 0xc5: cmp(addr_z()); break;
    case 0xc6: dec(addr_z()); break;
    case 0xc8: iny(); break;
    case 0xc9: cmp(addr_imm()); break;
    case 0xca: dex(); break;
    case 0xcc: cpy(addr_a()); break;
    case 0xcd: cmp(addr_a()); break;
    case 0xce: dec(addr_a()); break;
    case 0xd0: br(ZF,0); break;
    case 0xd1: cmp(addr_iy()); break;
    case 0xd5: cmp(addr_zi(X)); break;
    case 0xd6: dec(addr_zi(X)); break;
    case 0xd9: cmp(addr_ai(Y)); break;
    case 0xdd: cmp(addr_ai(X)); break;
    case 0xde: dec(addr_ai(X)); break;
    case 0xe0: cpx(addr_imm()); break;
    case 0xe1: sbc(addr_ix()); break;
    case 0xe4: cpx(addr_z()); break;
    case 0xe5: sbc(addr_z()); break;
    case 0xe6: inc(addr_z()); break;
    case 0xe8: inx(); break;
    case 0xe9: sbc(addr_imm()); break;
    case 0xea: nop(); break;
    case 0xec: cpx(addr_a()); break;
    case 0xed: sbc(addr_a()); break;
    case 0xee: inc(addr_a()); break;
    case 0xf0: br(ZF,ZF); break;
    case 0xf1: sbc(addr_iy()); break;
    case 0xf5: sbc(addr_zi(X)); break;
    case 0xf6: inc(addr_zi(X)); break;
    case 0xf9: sbc(addr_ai(Y)); break;
    case 0xfd: sbc(addr_ai(X)); break;
    case 0xfe: inc(addr_ai(X)); break;
    default: invalid_opcode();
  }
  return cycles;
}
} // namespace YAKC
