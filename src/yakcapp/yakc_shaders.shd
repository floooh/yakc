//------------------------------------------------------------------------------
//  shaders.shd
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//  Timothy Lottes CRT effect shader:
//  https://www.shadertoy.com/view/XsjSzR#

@code_block TL_CRT
//
//
// PUBLIC DOMAIN CRT STYLED SCAN-LINE SHADER
//
//   by Timothy Lottes
//
// This is more along the style of a really good CGA arcade monitor.
// With RGB inputs instead of NTSC.
// The shadow mask example has the mask rotated 90 degrees for less chromatic aberration.
//
// Left it unoptimized to show the theory behind the algorithm.
//
// It is an example what I personally would want as a display option for pixel art games.
// Please take and use, change, or whatever.
//

// hardcoded to source display resolution
_const vec2 res = vec2(480, 384);

// Hardness of scanline.
//  -8.0 = soft
// -16.0 = medium
//_const float hardScan=-8.0;
_const float hardScan=-6.0;

// Hardness of pixels in scanline.
// -2.0 = soft
// -4.0 = hard
//_const float hardPix=-2.0;
_const float hardPix=-2.5;

// Display warp. (this is provided as pixelshader param)
// 0.0 = none
// 1.0/8.0 = extreme
//static const vec2 warp=vec2(1.0/32.0,1.0/32.0);
//static const vec2 warp=vec2(1.0/24.0,1.0/16.0);
//_const vec2 warp=vec2(1.0/32.0,1.0/24.0);
//_const vec2 warp=vec2(1.0/64.0,1.0/64.0);

// Amount of shadow mask.
//_const float maskDark=0.75;
//_const float maskLight=2.0;

_const float maskDark=0.75;
_const float maskLight=2.0;

//------------------------------------------------------------------------

// sRGB to Linear.
// Assuing using sRGB typed textures this should not be needed.
_func float ToLinear1(float c){return(c<=0.04045)?c/12.92:pow((c+0.055)/1.055,2.4);}
_func vec3 ToLinear(vec3 c){return vec3(ToLinear1(c.r),ToLinear1(c.g),ToLinear1(c.b));}

// Linear to sRGB.
// Assuing using sRGB typed textures this should not be needed.
_func float ToSrgb1(float c){return(c<0.0031308?c*12.92:1.055*pow(c,0.41666)-0.055);}
_func vec3 ToSrgb(vec3 c){return vec3(ToSrgb1(c.r),ToSrgb1(c.g),ToSrgb1(c.b));}

// Nearest emulated sample given floating point position and texel offset.
// Also zero's off screen.
_func vec3 Fetch(sampler2D iChannel0, vec2 pos,vec2 off){
    pos=floor(pos*res+off)/res;
    if(max(abs(pos.x-0.5),abs(pos.y-0.5))>0.5)return vec3(0.0,0.0,0.0);
    return ToLinear(tex2D(iChannel0,pos.xy).rgb);}

// Distance in emulated pixels to nearest texel.
_func vec2 Dist(vec2 pos){pos=pos*res;return -((pos-floor(pos))-vec2(0.5,0.5));}

// 1D Gaussian.
_func float Gaus(float pos,float scale){return exp2(scale*pos*pos);}

// 3-tap Gaussian filter along horz line.
_func vec3 Horz3(sampler2D iChannel0, vec2 pos,float off){
    vec3 b=Fetch(iChannel0,pos,vec2(-1.0,off));
    vec3 c=Fetch(iChannel0,pos,vec2( 0.0,off));
    vec3 d=Fetch(iChannel0,pos,vec2( 1.0,off));
    float dst=Dist(pos).x;
    // Convert distance to weight.
    float scale=hardPix;
    float wb=Gaus(dst-1.0,scale);
    float wc=Gaus(dst+0.0,scale);
    float wd=Gaus(dst+1.0,scale);
    // Return filtered sample.
    return (b*wb+c*wc+d*wd)/(wb+wc+wd);}

// 5-tap Gaussian filter along horz line.
_func vec3 Horz5(sampler2D iChannel0, vec2 pos,float off){
    vec3 a=Fetch(iChannel0,pos,vec2(-2.0,off));
    vec3 b=Fetch(iChannel0,pos,vec2(-1.0,off));
    vec3 c=Fetch(iChannel0,pos,vec2( 0.0,off));
    vec3 d=Fetch(iChannel0,pos,vec2( 1.0,off));
    vec3 e=Fetch(iChannel0,pos,vec2( 2.0,off));
    float dst=Dist(pos).x;
    // Convert distance to weight.
    float scale=hardPix;
    float wa=Gaus(dst-2.0,scale);
    float wb=Gaus(dst-1.0,scale);
    float wc=Gaus(dst+0.0,scale);
    float wd=Gaus(dst+1.0,scale);
    float we=Gaus(dst+2.0,scale);
    // Return filtered sample.
    return (a*wa+b*wb+c*wc+d*wd+e*we)/(wa+wb+wc+wd+we);}

// Return scanline weight.
_func float Scan(vec2 pos,float off){
    float dst=Dist(pos).y;
    return Gaus(dst+off,hardScan);}

// Allow nearest three lines to effect pixel.
_func vec3 Tri(sampler2D iChannel0, vec2 pos){
    vec3 a=Horz3(iChannel0,pos,-1.0);
    vec3 b=Horz5(iChannel0,pos, 0.0);
    vec3 c=Horz3(iChannel0,pos, 1.0);
    float wa=Scan(pos,-1.0);
    float wb=Scan(pos, 0.0);
    float wc=Scan(pos, 1.0);
    return a*wa+b*wb+c*wc;}

// Distortion of scanlines, and end of screen alpha.
_func vec2 Warp(vec2 pos, vec2 warp){
    pos=pos*2.0-1.0;
    pos*=vec2(1.0+(pos.y*pos.y)*warp.x,1.0+(pos.x*pos.x)*warp.y);
    return pos*0.5+0.5;}

// Shadow mask.
_func vec3 Mask(vec2 pos){
    pos.x+=pos.y*3.0;
    vec3 mask=vec3(maskDark,maskDark,maskDark);
    pos.x=fract(pos.x/6.0);
    if(pos.x<0.333)mask.r=maskLight;
    else if(pos.x<0.666)mask.g=maskLight;
    else mask.b=maskLight;
    return mask;}

_func vec4 tl_crt(sampler2D iChannel0, vec4 fragCoord, vec2 uv, vec2 warp) {
    vec2 pos=Warp(uv, warp);
    return vec4(ToSrgb(Tri(iChannel0, pos) * Mask(fragCoord.yx)), 1.0); }
@end

//------------------------------------------------------------------------------
@vs yakc_vs
@in vec4 position
@in vec2 texcoord0
@out vec2 uv
{
    _position = position;
    uv = texcoord0;
}
@end

@texture_block yakcTextures YAKCTextures
sampler2D iChannel0 IRM
@end

@uniform_block yakcFSParams YAKCFSParams
bool colorTV ColorTV
vec2 crtWarp CRTWarp
@end

// this renders with expensive CRT effect
@fs yakc_crtFS
@use_code_block TL_CRT
@use_texture_block yakcTextures
@use_uniform_block yakcFSParams
@in vec2 uv
{
    vec4 color = tl_crt(iChannel0, _fragcoord, uv, crtWarp);
    if (!colorTV) {
        float lum = dot(color.xyz, vec3(0.3, 0.59, 0.11));
        color.xyz = vec3(lum, lum, lum);
    }
    _color = color;
}
@end

// this renders without the expensive CRT effect
@fs yakc_nocrtFS
@use_texture_block yakcTextures
@use_uniform_block yakcFSParams
@in vec2 uv
{
    vec4 color = tex2D(iChannel0, uv);
    if (!colorTV) {
        float lum = dot(color.xyz, vec3(0.3, 0.59, 0.11));
        color.xyz = vec3(lum, lum, lum);
    }
    _color = color;
}
@end

@program CRTShader yakc_vs yakc_crtFS
@program NoCRTShader yakc_vs yakc_nocrtFS

